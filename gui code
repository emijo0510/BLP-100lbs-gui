

'''
    Engineers: Emily Jones, Emily Guo  
    Date Created: 4/15/24
    First Draft
'''

Import matplotlib.pyplot - for line graphs
Import Tkinter - for GUI
Import Time - spark/burn times

# create a tkinter window
root = tk.TK() # create initial frame
root.geometry() # dimensions of frame
root.title(‘LFRE 100lbs GUI’) # GUI Title

# create a frame for the plots
frame = ttk.Frame(root)
frame.pack(fill=tk.BOTH, expand=True)

# Create five Figures and Axes for the plots
# create the first figure and axes
fig1, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(1, 5)
ax1.set_xlabel("Pressure Transducer 1")
ax2.set_xlabel("Pressure Transducer 2")
ax3.set_xlabel("Pressure Transducer 3")
ax4.set_xlabel("Pressure Transducer 4")
ax5.set_xlabel("Pressure Transducer 5")

# create a canvas for the first figure
canvas1 = FigureCanvasTkAgg(fig1, master=frame)
canvas_widget1 = canvas1.get_tk_widget()
canvas_widget1.pack(fill=tk.BOTH, expand=True)

# create the second figure and axes
fig2, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4)
ax1.set_xlabel("Pressure Transducer 1")
ax2.set_xlabel("Pressure Transducer 2")
ax3.set_xlabel("Pressure Transducer 3")
ax4.set_xlabel("Pressure Transducer 4")

# create a canvas for the second figure
canvas2 = FigureCanvasTkAgg(fig2, master=frame)
canvas_widget2 = canvas2.get_tk_widget()
canvas_widget2.pack(fill=tk.BOTH, expand=True)

# create the third figure and axes
fig3, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(1, 5)
ax1.set_xlabel("Pressure Transducer 1")
ax2.set_xlabel("Pressure Transducer 2")
ax3.set_xlabel("Pressure Transducer 3")
ax4.set_xlabel("Pressure Transducer 4")
ax5.set_xlabel("Pressure Transducer 5")

# create a canvas for the third figure
canvas3 = FigureCanvasTkAgg(fig3, master=frame)
canvas_widget3 = canvas3.get_tk_widget()
canvas_widget3.pack(fill=tk.BOTH, expand=True)

# create the fourth figure and axes
fig4, ((ax1, ax2, ax3, ax4), (ax5, _, _, _)) = plt.subplots(2, 4)
ax1.set_xlabel("Pressure Transducer 1")
ax2.set_xlabel("Pressure Transducer 2")
ax3.set_xlabel("Pressure Transducer 3")
ax4.set_xlabel("Pressure Transducer 4")
ax5.set_xlabel("Pressure Transducer 5")

# create a canvas for the fourth figure
canvas4 = FigureCanvasTkAgg(fig4, master=frame)
canvas_widget4 = canvas4.get_tk_widget()
canvas_widget4.pack(fill=tk.BOTH, expand=True)

# create the fifth figure and axes
fig5, ((ax1, ax2, ax3, ax4, ax5), (_, _, _, _, _)) = plt.subplots(2, 5)
ax1.set_xlabel("Pressure Transducer 1")
ax2.set_xlabel("Pressure Transducer 2")
ax3.set_xlabel("Pressure Transducer 3")
ax4.set_xlabel("Pressure Transducer 4")
ax5.set_xlabel("Pressure Transducer 5")

# create a canvas for the fifth figure
canvas5 = FigureCanvasTkAgg(fig5, master=frame)
canvas_widget5 = canvas5.get_tk_widget()
canvas_widget5.pack(fill=tk.BOTH, expand=True)

# do we need to inlude two more transducers? one for thrust and one for temp? Idk if this is right
fig6, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(4, 5)
ax1.set_xlabel("Thrust Transducer")
ax2.set_xlabel("Temperature Transducer")

# graph label
Thrust_label = tk.label(root, text = ‘Thrust’, font (fontname,fontsize) 
thrust_label.pack()

# button to display error
Good_Error = tk.Button(root, text = ‘Good’, command = ‘update_error’) 

# Initialize data for the plots

# Functions to update the plots

# Create a button to start updating the plots
Start_button = tk.Button(root, text = ‘Start’, command = start_button_clicked)
Start_button.pack()

# Create a button to quit the application
Abort_button = tk.Button(frame, text = ‘Abort’, command = abort_button_clicked)
Abort_button.pack()

# Create a coil button
Coil_button = tk.Button(root, text = ‘Coil’, command = spark_button)
Coil_button.pack()

# Add Valve buttons
valve_frame = ttk.Frame(root)
valve_frame.pack()

FV04_valve = tk.Button(root, text = ‘FV04’, command = open_valve)
FV04_valve. pack()

OV04_valve = tk.Button(root, text = ‘OV04’, command = open_valve)
OV04_valve.pack()

FV02_valve = tk.Button(root, text = ‘FV02’, command = open_valve)
FV02_valve.pack()

OV02_valve = tk.Button(root, text = ‘OV02’, command = open_valve)
OV02_valve.pack()

# Create buttons for spark/burn time control
Start_sparking_button = tk.Button(root, text='Start Sparking', command=start_sparking)
Start_sparking_button.pack()

Stop_sparking_button = tk.Button(root, text='Stop Sparking', command=stop_sparking)
Stop_sparking_button.pack()

Spark_frequency_button = tk.Button(root, text='Set Spark Frequency', command=spark_frequency)
Spark_frequency_button.pack()

# Create a button to start recording data
Record_data_button = tk.Button(root, text='Record Data', command=record_data)
Record_data_button.pack()

root.mainloop()

'''
    Engineers: Advika Govindarajan  
    Date Created: 09/15/24
    Current Draft
'''
import tkinter as tk
from tkinter import messagebox

# Function to toggle the button's color and text when pressed
def toggle_button(button):
    current_color = button['bg']
    if current_color == 'green':
        button.config(bg='red', text='Abort')
    else:
        button.config(bg='green', text='Start')

# Initialize tkinter window
root = tk.Tk()
root.title("BLP GUI")
root.geometry("900x700")

# Create frames and labels for the GUI layout
def create_sensor_frame(root, label_text):
    frame = tk.Frame(root, padx=5, pady=5)
    frame.pack_propagate(False)
    frame.configure(width=200, height=100)
    
    status_label = tk.Label(frame, text=label_text, font=('Arial', 10))
    status_label.pack(anchor="n")
    
    state_label = tk.Label(frame, text="Good/Error", font=('Arial', 10))
    state_label.pack(anchor="w")

    psi_label = tk.Label(frame, text="PSI: 0", font=('Arial', 10))
    psi_label.pack(anchor="w")

    line_graph = tk.Label(frame, text="Line graph", bg="white", width=25, height=3)
    line_graph.pack(anchor="center", pady=10)

    return frame

# Top-left thrust and temp sections
thrust_frame = create_sensor_frame(root, "Thrust")
thrust_frame.grid(row=0, column=0)

temp_frame = create_sensor_frame(root, "Temp")
temp_frame.grid(row=0, column=1)

# Pressure sections
pressure1_frame = create_sensor_frame(root, "Pressure 1")
pressure1_frame.grid(row=1, column=0)

pressure2_frame = create_sensor_frame(root, "Pressure 2")
pressure2_frame.grid(row=1, column=1)

pressure3_frame = create_sensor_frame(root, "Pressure 3")
pressure3_frame.grid(row=2, column=0)

pressure4_frame = create_sensor_frame(root, "Pressure 4")
pressure4_frame.grid(row=2, column=1)

pressure5_frame = create_sensor_frame(root, "Pressure 5")
pressure5_frame.grid(row=3, column=0, columnspan=2)

# Start and Abort buttons
start_button = tk.Button(root, text="Start", bg="green", fg="white", width=10, height=2,
                         command=lambda: toggle_button(start_button))
start_button.grid(row=4, column=0, pady=10)

abort_button = tk.Button(root, text="Abort", bg="red", fg="white", width=10, height=2)
abort_button.grid(row=4, column=1, pady=10)

# FV and OV buttons
fv04_button = tk.Button(root, text="FV-04", width=10, height=2)
fv04_button.grid(row=5, column=0, padx=10)

ov04_button = tk.Button(root, text="OV-04", width=10, height=2)
ov04_button.grid(row=5, column=1, padx=10)

fv02_button = tk.Button(root, text="FV-02", width=10, height=2)
fv02_button.grid(row=6, column=0, padx=10)

ov02_button = tk.Button(root, text="OV-02", width=10, height=2)
ov02_button.grid(row=6, column=1, padx=10)

# Spark time and Burn time entries
spark_time_label = tk.Label(root, text="Spark time", font=('Arial', 10))
spark_time_label.grid(row=7, column=0, pady=5)
spark_time_entry = tk.Entry(root, width=10)
spark_time_entry.grid(row=8, column=0)

burn_time_label = tk.Label(root, text="Burn time", font=('Arial', 10))
burn_time_label.grid(row=7, column=1, pady=5)
burn_time_entry = tk.Entry(root, width=10)
burn_time_entry.grid(row=8, column=1)

# Record Data, HITL, and Coil buttons
record_button = tk.Button(root, text="Record Data", width=10, height=2)
record_button.grid(row=5, column=2, padx=10)

hitl_button = tk.Button(root, text="HITL", width=10, height=2)
hitl_button.grid(row=6, column=2, padx=10)

coil_button = tk.Button(root, text="Coil", width=10, height=2)
coil_button.grid(row=7, column=2, padx=10)

# Add refresh rate/time placeholder
refresh_label = tk.Label(root, text="refresh rate / time", font=('Arial', 10))
refresh_label.grid(row=0, column=2)

# Run the tkinter main loop
root.mainloop()





