
import tkinter as tk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from tkinter import filedialog, messagebox
from matplotlib.figure import Figure
import pandas as pd
import os
from pycode import  Telemetry, System_Health, Metrics
from pycode import V1,V2,V3,V4,C,T,CS,A
import socket
import time

class GUI:
    # Create Window
    def __init__(self):
        self.chart_canvas = None
        self.PT5_label = None
        self.PT4_label = None
        self.PT3_label = None
        self.PT2_label = None
        self.PT1_label = None
        self.thrust_label = None
        self.temp_label = None
        self.banner_label = None
        self.abort_button = None
        self.start_button = None
        self.OV03_button = None
        self.FV03_button = None
        self.FV02_button = None
        self.NV02_button = None
        self.file_input_entry = None
        self.file_input = None
        self.title = None
        self.window = tk.Tk()
        self.window.title("BLP GUI")
        self.window.geometry('1000x1000')
        self.window.columnconfigure(0, weight=1)
        self.window.columnconfigure(1, weight=1)
        self.window.columnconfigure(2, weight=1)
        self.window.columnconfigure(3, weight=1)
        self.window.columnconfigure(4, weight=1)


        self.valve_status = {'NV-02': 0, 'FV-02': 0, 'FV-03': 0, 'OV-03': 0}

        # Configure layout for uniform button sizes
        for i in range(5):
            self.window.columnconfigure(i, weight=1, uniform="col")


        self.widgets()

    # Add widgets
    def widgets(self):
        # Title
        self.title = tk.Label(self.window,
                              text="BLP GUI",
                              font=("Times New Roman", 25),
                              background="light pink",
                              foreground="black")
        self.title.grid(row=0, columnspan=5, sticky="nsew")

        # File Input
        self.file_input = tk.StringVar()
        self.file_input_entry = tk.Button(self.window,
                                         text="Upload File",
                                         foreground="black",
                                         font=("Times New Roman", 20),
                                         command= self.upload_file)
        self.file_input_entry.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

        # NV02 Check Button
        self.NV02_button = tk.Button(self.window,
                                     text="NV-02",
                                     foreground="black",
                                     font=("Times New Roman", 20),
                                     command=lambda: self.toggle_valve(V1))
        self.NV02_button.grid(row=2, column=0, sticky="ew")

        # FV02 Check Button
        self.FV02_button = tk.Button(self.window,  # Renamed button
                                     text="FV-02",
                                     foreground="black",
                                     font=("Times New Roman", 20),
                                     command=lambda: self.toggle_valve(V2))
        self.FV02_button.grid(row=2, column=1, sticky="ew")

        # FV03 Check Button
        self.FV03_button = tk.Button(self.window,
                                     text="FV-03",
                                     foreground="black",
                                     font=("Times New Roman", 20),
                                     command=lambda: self.toggle_valve(V3))
        self.FV03_button.grid(row=2, column=2, sticky="ew")

        # OV03 Check Button
        self.OV03_button = tk.Button(self.window,
                                     text="OV-03",
                                     foreground="black",
                                     font=("Times New Roman", 20),
                                     command=lambda: self.toggle_valve(V4))
        self.OV03_button.grid(row=2, column=3, sticky="ew")
    

        # Start Button
        self.start_button = tk.Button(self.window,
                                      text="START",
                                      background="green",
                                      foreground="black",
                                      font=("Times New Roman", 20),
                                      command=self.start)
        self.start_button.grid(row=1, column=1, sticky="nsew", padx=5, pady=5)

        # Abort Button
        self.abort_button = tk.Button(self.window,
                                      text="ABORT",
                                      background="red",
                                      foreground="black",
                                      font=("Times New Roman", 20),
                                      command=self.abort)
        self.abort_button.grid(row=1, column=2, sticky="nsew", padx=5, pady=5)

        # Graphs Banner---------------------------------------------------------------------
        self.banner_label = tk.Label(self.window,
                                     text="Graphs",
                                     font=("Times New Roman", 20),
                                     background="light pink",
                                     foreground="black")
        self.banner_label.grid(row=4, column=0, columnspan=5, sticky="nsew", padx=5, pady=5)

        # Temperature Label
        self.temp_label = tk.Label(self.window,
                                   text="Temperature",
                                   background="white",
                                   foreground="black",
                                   font=("Times New Roman", 10), )
        self.temp_label.grid(row=5, column=0, sticky="nsew", padx=5, pady=5)

        self.chart_canvas = self.create_plot(self.window, 
                                             row = 6,
                                            column = 0)
        
        # Thrust Label
        self.thrust_label = tk.Label(self.window,
                                     text="Thrust",
                                     background="white",
                                     foreground="black",
                                     font=("Times New Roman", 10), )
        self.thrust_label.grid(row=5, column=2, sticky="nsew", padx=5, pady=5)

        self.chart_canvas = self.create_plot(self.window, 
                                             row = 6,
                                            column = 2)
        
        # Pressure Transducer 1 Label
        self.PT1_label = tk.Label(self.window,
                                  text="Pressure Transducer 1",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 10), )
        self.PT1_label.grid(row=5, column=4, sticky="nsew", padx=5, pady=5)

        self.chart_canvas = self.create_plot(self.window, 
                                             row = 6,
                                            column = 4)
        
        # Pressure Transducer 2 Label
        self.PT2_label = tk.Label(self.window,
                                  text="Pressure Transducer 2",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 10), )
        self.PT2_label.grid(row=7, column=0, sticky="nsew", padx=5, pady=5)

        self.chart_canvas = self.create_plot(self.window, 
                                             row = 8,
                                            column = 0)
        
        # Pressure Transducer 3 Label
        self.PT3_label = tk.Label(self.window,
                                  text="Pressure Transducer 3",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 10), )
        self.PT3_label.grid(row=7, column=2, sticky="nsew", padx=5, pady=5)

        self.chart_canvas = self.create_plot(self.window, 
                                             row = 8,
                                            column = 2)

        # Pressure Transducer 4 Label
        self.PT4_label = tk.Label(self.window,
                                  text="Pressure Transducer 4",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 10), )
        self.PT4_label.grid(row=7, column=4, sticky="nsew", padx=5, pady=5)

        self.chart_canvas = self.create_plot(self.window, 
                                             row = 8,
                                            column = 4)

        # Pressure Transducer 5 Label
        self.PT5_label = tk.Label(self.window,
                                  text="Pressure Transducer 5",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 10), )
        self.PT5_label.grid(row=11, column=0, sticky="nsew", padx=5, pady=5)

        self.chart_canvas = self.create_plot(self.window, 
                                             row = 12,
                                            column = 0)
        

    # Function Commands-------------------------------------------------------------------------------------------

    # Upload File
    def upload_file(self):
        file_path = filedialog.askopenfilename()
        if file_path:  # Check if a file is selected
            print(f"Selected file: {file_path}")
            try:
                df = pd.read_excel(file_path) # only works for excel files
                tel.upload_test_sequence(file_path)
            except Exception as e:
                print(f"Error loading file: {e}")

    # Start button
    def start(self):
        tel.start_test()
        tel.send_data()
        self.start_button.config(background="green")  # Brighter green when clicked
        self.abort_button.config(background="light coral")  # Light red remains

    # Abort button
    def abort(self):
        tel.abort()
        tel.send_data()
        self.abort_button.config(background="red")  # Brighter red when clicked
        self.start_button.config(background="light green")  # Light green remains

    # Toggle Valves
    def toggle_valve(self, name):
        # 0 = closed , 1 = open
        if name == V1 and self.valve_status['NV-02'] == 0:
            tel.open_valve(V1)
            tel.send_data()
            self.NV02_button.config(bg="green")
            self.valve_status['NV-02'] = 1
            print("NV-02 opened")
        elif name == V2 and self.valve_status['FV-02'] == 0:
            tel.open_valve(V2)
            tel.send_data()
            self.FV02_button.config(bg="green")
            self.valve_status['FV-02'] = 1
            print("FV-02 opened")
        elif name == V3 and self.valve_status['FV-03'] == 0:
            tel.open_valve(V3)
            tel.send_data()
            self.FV03_button.config(bg="green")
            self.valve_status['FV-03'] = 1
            print("FV-03 opened")
        elif name == V4 and self.valve_status['OV-03'] == 0:
            tel.open_valve(V4)
            tel.send_data()
            self.OV03_button.config(bg="green")
            self.valve_status['OV-03'] = 1
            print("OV-03 opened")
        elif name == V1 and self.valve_status['NV-02'] == 1:
            tel.close_valve(V1)
            tel.send_data()
            self.NV02_button.config(bg="red")
            self.valve_status['NV-02'] = 0
            print("NV-02 closed")
        elif name == V2 and self.valve_status['FV-02'] == 1:
            tel.close_valve(V2)
            tel.send_data()
            self.FV02_button.config(bg="red")
            self.valve_status['FV-02'] = 0
            print("FV-02 closed")
        elif name == V3 and self.valve_status['FV-03'] == 1:
            tel.close_valve(V3)
            tel.send_data()
            self.FV03_button.config(bg="red")
            self.valve_status['FV-03'] = 0
            print("FV-03 closed")
        elif name == V4 and self.valve_status['OV-03'] == 1:
            tel.close_valve(V4)
            tel.send_data()
            self.OV03_button.config(bg="red")
            self.valve_status['OV-03'] = 0
            print("OV-03 closed")
        else:
            print("Error")


    # Create Plots
    def create_plot(self, title, row, column):
        """Create and embed a matplotlib plot with x and y axes"""
        fig = Figure(figsize=(5, 2), dpi=100)
        ax = fig.add_subplot(111)
        ax.set_xlabel("Time (s)", fontsize=7)
        ax.set_ylabel("Value", fontsize=7)
        ax.grid(True)

        fig.tight_layout(pad=3.0)  # Adds space between the plot and axis labels
    
        fig.subplots_adjust(bottom=0.3)
        fig.subplots_adjust(top=0.9)

        canvas = FigureCanvasTkAgg(fig, master=self.window)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.grid(row=row, column=column, columnspan=2, sticky="nsew", padx=5, pady=5)
        canvas.draw()

if __name__ == "__main__":
    window = GUI()
    sys = System_Health()
    tel = Telemetry(sys)
    window.window.mainloop()









