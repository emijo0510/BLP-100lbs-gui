import tkinter as tk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from tkinter import filedialog, messagebox
from matplotlib.figure import Figure
import pandas as pd
import os
from pycode import Telemetry, System_Health, Metrics
from pycode import V1, V2, V3, V4, C, T, CS, A
import socket
import time
from serial_pc import BT
import subprocess
import datetime
import json

# ---------- Fake Telemetry for Simulation Testing ----------
class FakeTelemetry:
    def __init__(self, sys):
        print("FakeTelemetry: Initialized (Simulation Mode).")
        self.counter = 0

    def start_test(self):
        print("FakeTelemetry: Test started.")

    def send_data(self):
        print("FakeTelemetry: Data sent.")

    def abort(self):
        print("FakeTelemetry: Test aborted.")

    def open_valve(self, valve):
        print(f"FakeTelemetry: Valve {valve} opened.")

    def close_valve(self, valve):
        print(f"FakeTelemetry: Valve {valve} closed.")

    def upload_test_sequence(self, file_path):
        print(f"FakeTelemetry: Uploaded test sequence from {file_path}")

    def get_data(self):
        self.counter += 1
        # Cycle thrust between 0 and 200 lbf
        thrust = self.counter % 201
        # Cycle pressure values between 0 and 850
        pt1 = (self.counter * 2) % 851
        pt2 = (self.counter * 3) % 851
        pt3 = (self.counter * 4) % 851
        pt4 = (self.counter * 5) % 851
        pt5 = (self.counter * 6) % 851
        return [thrust, pt1, pt2, pt3, pt4, pt5]

# ---------- LaTeX Report Generation Functions (with Graphs) ----------

def generate_latex_document_local(test_data, user_notes, graph_filenames):
        latex_code = f"""
    \\documentclass{{article}}
    \\usepackage{{graphicx}}
    \\usepackage{{booktabs}}
    \\usepackage[margin=0.5in]{{geometry}}
    \\begin{{document}}

    \\title{{Liquid Fuel Rocket Engine Test Report}}
    \\author{{Automated System}}
    \\date{{\\today}}
    \\maketitle

    \\section*{{Abstract}}
    This liquid fuel rocket engine test document is a comprehensive evaluation 
    designed to assess the engine's performance and reliability across several critical parameters. 
    This document will provide an overview of the performance metrics gathered by collecting and 
    analyzing data over the duration of the test. Key aspects examined included the functioning of 
    individual valves, verifying the abort system to rapidly shut down the test, graphs of pressure 
    transducers and thrust over the period of the test with highlighted points of warning, 
    and notes provided by the test conductor at the end of the test. 
    Together, these evaluations provide insights into engine performance, design optimization, 
    and the safety measures required.

    \\section*{{User Notes}}
    {user_notes}
    
    \\section*{{Duration of Test}}
    Start Time: {test_data["start_time"]} \\\\
    End Time: {test_data["end_time"]}

    \\section*{{Graphs}}
    """
        for graph in graph_filenames:
            latex_code += f"""
    \\begin{{figure}}[ht]
    \\centering
    \\includegraphics[width=0.6\\textwidth]{{{graph}}}
    \\caption{{{graph.replace('_', ' ').replace('.png', '').title()}}}
    \\end{{figure}}
    """
        latex_code += f"""

    \\end{{document}}
    """
        return latex_code


def save_latex_file(latex_code, filename_prefix="test_report"):
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    tex_filename = f"{filename_prefix}_{timestamp}.tex"
    with open(tex_filename, "w") as f:
        f.write(latex_code)
    return tex_filename


def compile_latex(tex_filename):
    try:
        subprocess.run(["pdflatex", tex_filename], check=True)
        print("LaTeX compilation successful!")
    except subprocess.CalledProcessError as e:
        print("An error occurred during LaTeX compilation:", e)


# ---------- GUI Class with Integrated LaTeX Report Generation ----------
class GUI:
    def __init__(self):
        # Data storage for graphs
        self.thrust_data = []
        self.pt1_data = []
        self.pt2_data = []
        self.pt3_data = []
        self.pt4_data = []
        self.pt5_data = []
        self.all_data = []

        # Placeholders for plot elements
        self.thrust_fig = self.thrust_ax = self.thrust_canvas = self.thrust_line = None
        self.pt1_fig = self.pt1_ax = self.pt1_canvas = self.pt1_line = None
        self.pt2_fig = self.pt2_ax = self.pt2_canvas = self.pt2_line = None
        self.pt3_fig = self.pt3_ax = self.pt3_canvas = self.pt3_line = None
        self.pt4_fig = self.pt4_ax = self.pt4_canvas = self.pt4_line = None
        self.pt5_fig = self.pt5_ax = self.pt5_canvas = self.pt5_line = None

        self.chart_canvas = None
        self.PT5_label = None
        self.PT4_label = None
        self.PT3_label = None
        self.PT2_label = None
        self.PT1_label = None
        self.thrust_label = None
        self.temp_label = None
        self.banner_label = None
        self.abort_button = None
        self.start_button = None
        self.OV03_button = None
        self.FV03_button = None
        self.FV02_button = None
        self.NV02_button = None
        self.file_input_entry = None
        self.file_input = None
        self.title = None
        self.timer_label = None
        self.warning_label = None
        self.start_time = None

        self.window = tk.Tk()
        self.window.title("BLP GUI")
        self.window.geometry('1000x1000')
        for i in range(5):
            self.window.columnconfigure(i, weight=1, uniform="col")

        self.valve_status = {'NV-02': 0, 'FV-02': 0, 'FV-03': 0, 'OV-03': 0}
        self.widgets()

    def widgets(self):
        # Timer label
        self.timer_label = tk.Label(self.window, text="Elapsed Time: 0 s",
                                    font=("Times New Roman", 15), fg="black")
        self.timer_label.grid(row=1, column=3, sticky="w", padx=5, pady=5)

        # Warning label
        self.warning_label = tk.Label(self.window, text=" ",
                                      font=("Times New Roman", 15), fg="red")
        self.warning_label.grid(row=2, column=4, sticky="e", padx=5, pady=5)

        # Title
        self.title = tk.Label(self.window,
                              text="BLP GUI",
                              font=("Times New Roman", 25),
                              background="light pink",
                              foreground="black")
        self.title.grid(row=0, columnspan=5, sticky="nsew", pady=(40, 5))

        # File Input
        self.file_input = tk.StringVar()
        self.file_input_entry = tk.Button(self.window,
                                          text="Upload File",
                                          foreground="black",
                                          font=("Times New Roman", 20),
                                          command=self.upload_file)
        self.file_input_entry.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

        # NV02 Button
        self.NV02_button = tk.Button(self.window,
                                     text="NV-02",
                                     foreground="black",
                                     font=("Times New Roman", 20),
                                     command=lambda: self.toggle_valve(V1))
        self.NV02_button.grid(row=2, column=0, sticky="ew", padx=5, pady=5)

        # FV02 Button
        self.FV02_button = tk.Button(self.window,
                                     text="FV-02",
                                     foreground="black",
                                     font=("Times New Roman", 20),
                                     command=lambda: self.toggle_valve(V2))
        self.FV02_button.grid(row=2, column=1, sticky="ew", padx=5, pady=5)

        # FV03 Button
        self.FV03_button = tk.Button(self.window,
                                     text="FV-03",
                                     foreground="black",
                                     font=("Times New Roman", 20),
                                     command=lambda: self.toggle_valve(V3))
        self.FV03_button.grid(row=2, column=2, sticky="ew", padx=5, pady=5)

        # OV03 Button
        self.OV03_button = tk.Button(self.window,
                                     text="OV-03",
                                     foreground="black",
                                     font=("Times New Roman", 20),
                                     command=lambda: self.toggle_valve(V4))
        self.OV03_button.grid(row=2, column=3, sticky="ew", padx=5, pady=5)

        # Start Button
        self.start_button = tk.Button(self.window,
                                      text="START",
                                      background="green",
                                      foreground="black",
                                      font=("Times New Roman", 20),
                                      command=self.start)
        self.start_button.grid(row=1, column=1, sticky="nsew", padx=5, pady=5)

        # Abort Button
        self.abort_button = tk.Button(self.window,
                                      text="ABORT",
                                      background="red",
                                      foreground="black",
                                      font=("Times New Roman", 20),
                                      command=self.abort)
        self.abort_button.grid(row=1, column=2, sticky="nsew", padx=5, pady=5)

        # Labels for graphs
        self.thrust_label = tk.Label(self.window,
                                     text="Thrust",
                                     background="white",
                                     foreground="black",
                                     font=("Times New Roman", 15))
        self.thrust_label.grid(row=5, column=0, sticky="nsew", padx=5, pady=5)

        self.PT1_label = tk.Label(self.window,
                                  text="Pressure Transducer 1",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 15))
        self.PT1_label.grid(row=5, column=2, sticky="nsew", padx=5, pady=5)

        self.PT2_label = tk.Label(self.window,
                                  text="Pressure Transducer 2",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 15))
        self.PT2_label.grid(row=5, column=4, sticky="nsew", padx=5, pady=5)

        self.PT3_label = tk.Label(self.window,
                                  text="Pressure Transducer 3",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 15))
        self.PT3_label.grid(row=7, column=0, sticky="nsew", padx=5, pady=5)

        self.PT4_label = tk.Label(self.window,
                                  text="Pressure Transducer 4",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 15))
        self.PT4_label.grid(row=7, column=2, sticky="nsew", padx=5, pady=5)

        self.PT5_label = tk.Label(self.window,
                                  text="Pressure Transducer 5",
                                  background="white",
                                  foreground="black",
                                  font=("Times New Roman", 15))
        self.PT5_label.grid(row=7, column=4, sticky="nsew", padx=5, pady=5)

        # Create plots and store references for updates
        self.thrust_fig, self.thrust_ax, self.thrust_canvas, self.thrust_line = \
            self.create_plot(row=6, column=0, xlabel="Time (s)", ylabel="Thrust (lbf)", data=[])
        self.pt1_fig, self.pt1_ax, self.pt1_canvas, self.pt1_line = \
            self.create_plot(row=6, column=2, xlabel="Time (s)", ylabel="Pressure (PSI)", data=[])
        self.pt2_fig, self.pt2_ax, self.pt2_canvas, self.pt2_line = \
            self.create_plot(row=6, column=4, xlabel="Time (s)", ylabel="Pressure (PSI)", data=[])
        self.pt3_fig, self.pt3_ax, self.pt3_canvas, self.pt3_line = \
            self.create_plot(row=8, column=0, xlabel="Time (s)", ylabel="Pressure (PSI)", data=[])
        self.pt4_fig, self.pt4_ax, self.pt4_canvas, self.pt4_line = \
            self.create_plot(row=8, column=2, xlabel="Time (s)", ylabel="Pressure (PSI)", data=[])
        self.pt5_fig, self.pt5_ax, self.pt5_canvas, self.pt5_line = \
            self.create_plot(row=8, column=4, xlabel="Time (s)", ylabel="Pressure (PSI)", data=[])

    def create_plot(self, row, column, xlabel, ylabel, data):
        fig = Figure(figsize=(5, 3), dpi=100)
        ax = fig.add_subplot(111)
        ax.set_xlabel(xlabel, fontsize=10)
        ax.set_ylabel(ylabel, fontsize=10)
        ax.grid(True)
        if data:
            line, = ax.plot(range(len(data)), data)
        else:
            line, = ax.plot([], [])
        fig.tight_layout(pad=3.0)
        fig.subplots_adjust(bottom=0.3, top=0.9)
        canvas = FigureCanvasTkAgg(fig, master=self.window)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.grid(row=row, column=column, columnspan=2, sticky="nsew", padx=5, pady=5)
        canvas.draw()
        return fig, ax, canvas, line

    def upload_file(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            print(f"Selected file: {file_path}")
            try:
                df = pd.read_excel(file_path)
                tel.upload_test_sequence(file_path)
            except Exception as e:
                print(f"Error loading file: {e}")

    def start(self):
        tel.start_test()
        tel.send_data()
        self.start_time = time.time()  # record test start time
        self.update_graphs()  # start telemetry update loop
        self.start_button.config(background="green")
        self.abort_button.config(background="light coral")

    def abort(self):
        tel.abort()
        tel.send_data()
        self.abort_button.config(background="red")
        self.start_button.config(background="light green")
        if hasattr(self, "after_id") and self.after_id:
            self.window.after_cancel(self.after_id)
        # Stop telemetry updates and close main window
        self.window.withdraw()
        # Open a new window for end‐of‐test notes and report generation
        self.open_notes_window()


    def toggle_valve(self, name):
        if name == V1 and self.valve_status['NV-02'] == 0:
            tel.open_valve(V1)
            tel.send_data()
            self.NV02_button.configure(background="green")
            self.valve_status['NV-02'] = 1
            print("NV-02 opened")
        elif name == V2 and self.valve_status['FV-02'] == 0:
            tel.open_valve(V2)
            tel.send_data()
            self.FV02_button.config(bg="green")
            self.valve_status['FV-02'] = 1
            print("FV-02 opened")
        elif name == V3 and self.valve_status['FV-03'] == 0:
            tel.open_valve(V3)
            tel.send_data()
            self.FV03_button.config(bg="green")
            self.valve_status['FV-03'] = 1
            print("FV-03 opened")
        elif name == V4 and self.valve_status['OV-03'] == 0:
            tel.open_valve(V4)
            tel.send_data()
            self.OV03_button.config(bg="green")
            self.valve_status['OV-03'] = 1
            print("OV-03 opened")
        elif name == V1 and self.valve_status['NV-02'] == 1:
            self.NV02_button.config(bg="red")
            self.valve_status['NV-02'] = 0
            print("NV-02 closed")
        elif name == V2 and self.valve_status['FV-02'] == 1:
            tel.close_valve(V2)
            tel.send_data()
            self.FV02_button.config(bg="red")
            self.valve_status['FV-02'] = 0
            print("FV-02 closed")
        elif name == V3 and self.valve_status['FV-03'] == 1:
            tel.close_valve(V3)
            tel.send_data()
            self.FV03_button.config(bg="red")
            self.valve_status['FV-03'] = 0
            print("FV-03 closed")
        elif name == V4 and self.valve_status['OV-03'] == 1:
            tel.close_valve(V4)
            tel.send_data()
            self.OV03_button.config(bg="red")
            self.valve_status['OV-03'] = 0
            print("OV-03 closed")
        else:
            print("Error")

    def update_graphs(self):
        new_data = tel.get_data()  # expected to return a list of sensor values
        if new_data and len(new_data) >= 6:
            self.all_data.append(new_data[:6])

            self.thrust_data.append(new_data[0])
            self.pt1_data.append(new_data[1])
            self.pt2_data.append(new_data[2])
            self.pt3_data.append(new_data[3])
            self.pt4_data.append(new_data[4])
            self.pt5_data.append(new_data[5])

            self.thrust_line.set_data(range(len(self.thrust_data)), self.thrust_data)
            self.thrust_ax.relim()
            self.thrust_ax.autoscale_view()
            self.thrust_canvas.draw()

            self.pt1_line.set_data(range(len(self.pt1_data)), self.pt1_data)
            self.pt1_ax.relim()
            self.pt1_ax.autoscale_view()
            self.pt1_canvas.draw()

            self.pt2_line.set_data(range(len(self.pt2_data)), self.pt2_data)
            self.pt2_ax.relim()
            self.pt2_ax.autoscale_view()
            self.pt2_canvas.draw()

            self.pt3_line.set_data(range(len(self.pt3_data)), self.pt3_data)
            self.pt3_ax.relim()
            self.pt3_ax.autoscale_view()
            self.pt3_canvas.draw()

            self.pt4_line.set_data(range(len(self.pt4_data)), self.pt4_data)
            self.pt4_ax.relim()
            self.pt4_ax.autoscale_view()
            self.pt4_canvas.draw()

            self.pt5_line.set_data(range(len(self.pt5_data)), self.pt5_data)
            self.pt5_ax.relim()
            self.pt5_ax.autoscale_view()
            self.pt5_canvas.draw()

            elapsed = int(time.time() - self.start_time)
            self.timer_label.config(text=f"Elapsed Time: {elapsed} s")

            warning_messages = []

            if self.pt1_data and self.pt1_data[-1] > 350:
                warning_messages.append("Almost too high EPD_01!")
            if self.pt1_data and self.pt1_data[-1] < 150:
                warning_messages.append("Almost too low EPD_01!")
            if self.pt2_data and self.pt2_data[-1] > 530:
                warning_messages.append("Almost too high FPD_01!")
            if self.pt3_data and self.pt3_data[-1] > 820:
                warning_messages.append("Almost too high OPD_01!")

            # Join multiple warnings with a newline.
            self.warning_label.config(text="\n".join(warning_messages))

        self.after_id = self.window.after(1000, self.update_graphs)

    def open_notes_window(self):
            notes_win = tk.Toplevel(self.window)
            notes_win.title("Enter End-of-Test Notes")
            notes_win.geometry("600x400")
            notes_frame = tk.Frame(notes_win)
            notes_frame.pack(fill="both", expand=True, padx=5, pady=5)
            text_widget = tk.Text(notes_frame, font=("Times New Roman", 14))
            text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scrollbar = tk.Scrollbar(notes_frame, command=text_widget.yview)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            text_widget.config(yscrollcommand=scrollbar.set)
            gen_btn = tk.Button(notes_win, text="Generate Report", font=("Times New Roman", 20),
                                command=lambda: self.generate_report(text_widget.get("1.0", tk.END), notes_win))
            gen_btn.pack(pady=10)


    def save_test_graphs(self):
        thrust_full = [reading[0] for reading in self.all_data]
        pt1_full = [reading[1] for reading in self.all_data]
        pt2_full = [reading[2] for reading in self.all_data]
        pt3_full = [reading[3] for reading in self.all_data]
        pt4_full = [reading[4] for reading in self.all_data]
        pt5_full = [reading[5] for reading in self.all_data]

        # Create a figure to plot the full thrust data:
        full_fig, full_ax = plt.subplots()
        full_ax.plot(range(len(thrust_full)), thrust_full, marker='o')
        full_ax.set_title("Full Thrust Data")
        full_ax.set_xlabel("Time (s)")
        full_ax.set_ylabel("Thrust (lbf)")
        thrust_graph_filename = "full_thrust_graph.pdf"
        full_fig.savefig(thrust_graph_filename)
        print(f"Full thrust graph saved as '{thrust_graph_filename}'.")
        print(thrust_full)

        # Create a figure to plot the full pt1 data:
        full_fig, full_ax = plt.subplots()
        full_ax.plot(range(len(pt1_full)), pt1_full, marker='o')
        full_ax.set_title("PT1 Data")
        full_ax.set_xlabel("Time (s)")
        full_ax.set_ylabel("Pressure (PSI)")
        PT1_graph_filename = "pt1_graph.pdf"
        full_fig.savefig(PT1_graph_filename)
        print(f"PT1 graph saved as '{PT1_graph_filename}'.")
        print(pt1_full)

        # Create a figure to plot the full pt2 data:
        full_fig, full_ax = plt.subplots()
        full_ax.plot(range(len(pt2_full)), pt2_full, marker='o')
        full_ax.set_title("PT2 Data")
        full_ax.set_xlabel("Time (s)")
        full_ax.set_ylabel("Pressure (PSI)")
        PT2_graph_filename = "pt2_graph.pdf"
        full_fig.savefig(PT2_graph_filename)
        print(f"PT2 graph saved as '{PT2_graph_filename}'.")
        print(pt2_full)

        # Create a figure to plot the full pt3 data:
        full_fig, full_ax = plt.subplots()
        full_ax.plot(range(len(pt1_full)), pt3_full, marker='o')
        full_ax.set_title("PT3 Data")
        full_ax.set_xlabel("Time (s)")
        full_ax.set_ylabel("Pressure (PSI)")
        PT3_graph_filename = "pt3_graph.pdf"
        full_fig.savefig(PT3_graph_filename)
        print(f"PT3 graph saved as '{PT3_graph_filename}'.")
        print(pt3_full)

        # Create a figure to plot the full pt4 data:
        full_fig, full_ax = plt.subplots()
        full_ax.plot(range(len(pt4_full)), pt4_full, marker='o')
        full_ax.set_title("PT4 Data")
        full_ax.set_xlabel("Time (s)")
        full_ax.set_ylabel("Pressure (PSI)")
        PT4_graph_filename = "pt4_graph.pdf"
        full_fig.savefig(PT4_graph_filename)
        print(f"PT4 graph saved as '{PT4_graph_filename}'.")
        print(pt4_full)

        # Create a figure to plot the full pt5 data:
        full_fig, full_ax = plt.subplots()
        full_ax.plot(range(len(pt1_full)), pt5_full, marker='o')
        full_ax.set_title("PT5 Data")
        full_ax.set_xlabel("Time (s)")
        full_ax.set_ylabel("Pressure (PSI)")
        PT5_graph_filename = "pt5_graph.pdf"
        full_fig.savefig(PT5_graph_filename)
        print(f"PT5 graph saved as '{PT5_graph_filename}'.")
        print(pt5_full)

        # Return the filename (or a list if you have multiple graphs)
        return [thrust_graph_filename,PT1_graph_filename,PT2_graph_filename,PT3_graph_filename,PT4_graph_filename,PT5_graph_filename]

    def generate_report(self, user_notes, notes_win):
        # Create a test_data dictionary based on the current telemetry
        test_data = {
            "start_time": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(self.start_time)) if self.start_time else "N/A",
            "end_time": time.strftime("%Y-%m-%d %H:%M:%S"),
            "total_data_points": len(self.thrust_data)
        }
        # Optionally, you can save test_data to a file here
        graph_filenames = self.save_test_graphs()  # Call the method from this class
        latex_code = generate_latex_document_local(test_data, user_notes.strip(), graph_filenames)
        tex_filename = save_latex_file(latex_code)
        compile_latex(tex_filename)
        messagebox.showinfo("Report Generated", f"Report generated and saved as {tex_filename}")
        notes_win.destroy()


if __name__ == "__main__":
    sys_health = System_Health()
    SIMULATION = True  # Set to False to use real telemetry
    if SIMULATION:
        tel = FakeTelemetry(sys_health)
    else:
        tel = Telemetry(sys_health)
    window = GUI()
    window.window.mainloop()
